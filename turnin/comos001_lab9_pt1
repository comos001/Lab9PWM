/*	Author: comos001
 *  Partner(s) Name: 
 *	Lab Section:
 *	Assignment: Lab #  Exercise #
 *	Exercise Description: [optional - include for your own benefit]
 *
 *	I acknowledge all content contained herein, excluding template or example
 *	code, is my own original work.
 */
#include <avr/io.h>
#include "timer.h"
#include "pwm.h"

#ifdef _SIMULATE_
#include "simAVRHeader.h"
#endif





enum SM_States {START, sm_1, sm_2, sm_3} state;


void TickFct() {
	switch(state) {
		case START:
			if ((~PINA & 0x07) == 0x01) {
				state = sm_1;
			} else if ((~PINA & 0x07) == 0x02) {
				state = sm_2;
			} else if ((~PINA & 0x07) == 0x04) {
				state = sm_3;
			} else {
				state = START;
			}
			break;
		case sm_1:
			if ((~PINA & 0x07) == 0x01) {
				state = sm_1;
			} else {
				state = START;
			}	
			break;
		case sm_2:
			if ((~PINA & 0x07) == 0x02) {
				state = sm_2;
			} else {
				state = START;
			}
			break;
		case sm_3:
			if ((~PINA & 0x07) == 0x04) {
				state = sm_3;
			} else {
				state = START;
			}
			break;
		default:
			break;

	}

	switch(state) {
		case START:
			set_PWM(0);
			break;
		case sm_1:
			set_PWM(261.63);
			break;
		case sm_2:
			set_PWM(293.66);
			break;
		case sm_3:
			set_PWM(329.63);
			break;
		default:
			break;
	}


}
int main(void) {
	/* Insert DDR and PORT initializations */
    DDRA = 0x00; PORTA = 0xFF;
    DDRB = 0xFF; PORTB = 0x00;
    DDRC = 0xFF; PORTC = 0x00;
    DDRD = 0xFF; PORTD = 0x00;
    	

    TimerSet(50);
    TimerOn();
    PWM_on();
	PORTB = 0x01;
    /* Insert your solution below */
    while (1) {
        while (!TimerFlag);
        TimerFlag = 0;
   	TickFct();
	}
    return 1;    

}
